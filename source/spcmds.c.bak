/* Copyright 1989 Dave Bayer and Mike Stillman. All rights reserved. */
#include <stdio.h>
#include <string.h>
#include "shared.h"
#include "spcmds.h"
#include "array.h" /* For array_length() */
#include "cmds.h"  /* For vget_mod(), vget_ring(), make_var(), set_value() */
/* External functions from gm_dlist.c - avoiding problematic header */
extern void dl_copy(dlist *src, dlist *dest);
extern void dl_insert(dlist *dl, int val);
#include "gm_poly.h" /* For p_copy() */
#include "gmatrix.h" /* For gmInsert() */
#include "input.h"   /* For get_line() */
/* External function from input.c */
extern boolean getVarList(int argc, char **argv, expterm vars);
#include "monitor.h" /* For printnew(), prerror() */
#include "poly.h"    /* For p_monom(), p_add(), p1_mult(), degree() */
#include "qring.h"   /* For qrgReduce() */
#include "ring.h"    /* For getVar() */
#include "term.h"    /* For sToExp(), expToS(), tm_component() */

/* External variables */
extern int numvars;
extern field fd_one;
extern ring current_ring;

/* External function from gmatrix.c */
extern gmatrix mod_init(void);

/* Constants from vars.c */
constexpr int MAINVAR = 0;
constexpr int VMODULE = 2;

/*--- coef cmd ---------------------------*/

boolean moneq(expterm exp, term t, expterm vars) /* if return TRUE, sets exponent of each */
/* var in "vars", of "t" to 0 */
/* if vars[i] != 0, "i" is in "vars" */
{
    int i;
    expterm exp2;

    sToExp(t, exp2);
    for (i = 0; i < numvars; i++)
    {
        if (vars[i] IS 0)
            continue;
        if (exp[i] ISNT exp2[i])
            return (FALSE);
        else
            exp2[i] = 0;
    }
    expToS(exp2, tm_component(t), t);
    return (TRUE);
}

poly strip_poly(poly *f, expterm vars, poly *hmonom)
{
    int i;
    poly result, temp;
    expterm exp;
    poly inresult;
    /* Use a dummy poly struct for list head trick */
    struct pol dummy_head;

    if (*f IS NULL)
        return (NULL);
    inresult = &dummy_head;
    inresult->next = *f;
    sToExp(INITIAL(*f), exp);
    result = NULL;

    for (i = 0; i < numvars; i++)
        if (vars[i] IS 0)
            exp[i] = 0;
    *hmonom = p_monom(fd_one);
    expToS(exp, 1, INITIAL(*hmonom));

    while (inresult->next ISNT NULL)
        if (moneq(exp, INITIAL(inresult->next), vars))
        {
            temp = inresult->next;
            inresult->next = temp->next;
            temp->next = NULL;
            p_add(&result, &temp);
        }
        else
            inresult = inresult->next;
    *f = dummy_head.next;
    return (result);
}

void gm_coef(gmatrix M, expterm vars, gmatrix *Mmonoms, gmatrix *Mcoefs)
{
    poly f, g, hmonom;
    int j;

    *Mmonoms = mod_init();
    dl_insert(&(*Mmonoms)->degrees, 0);
    *Mcoefs = mod_init();
    dl_copy(&(M->degrees), &((*Mcoefs)->degrees));
    for (j = 1; j <= length(&(M->gens)); j++)
    {
        f = p_copy(PREF(M->gens, j));
        while (f ISNT NULL)
        {
            g = strip_poly(&f, vars, &hmonom);
            gmInsert(*Mmonoms, hmonom);
            gmInsert(*Mcoefs, g);
        }
    }
}

void coef_cmd(int argc, char *argv[])
{
    gmatrix M;
    gmatrix Mmonoms, Mcoefs;
    variable *p, *q;
    expterm vars;

    if (argc <= 3)
    {
        printnew("coef <matrix> <result monoms> <result coefs> [variable list]\n");
        return;
    }
    GET_MOD(M, 1);
    NEW_MOD(p, 2);
    NEW_MOD(q, 3);
    if (NOT(getVarList(argc - 4, argv + 4, vars)))
        return;
    gm_coef(M, vars, &Mmonoms, &Mcoefs);
    set_value(p, Mmonoms);
    set_value(q, Mcoefs);
}

poly p_homog(gmatrix M, poly f, int v)
{
    poly g, h, temp, result;
    int d, maxd, a;
    expterm exp;
    allocterm t;

    if (f IS NULL)
        return (NULL);
    g = f;
    maxd = degree(M, g);
    while (g ISNT NULL)
    {
        d = degree(M, g);
        if (d > maxd)
            maxd = d;
        g = g->next;
    }

    g = f;
    result = NULL;
    while (g ISNT NULL)
    {
        d = maxd - degree(M, g);
        /* the following should be in poly.c or term.c */
        for (a = 0; a < numvars; a++)
            exp[a] = 0;
        exp[v] = d;
        expToS(exp, 1, t);
        temp = g;
        g = g->next;
        temp->next = NULL;
        h = p1_mult(fd_one, t, temp);
        temp->next = g;
        p_add(&result, &h);
    }
    qrgReduce(&result);
    return (result);
}

gmatrix gm_homog(gmatrix M, int v) /* use this var as homog. variable */
{
    gmatrix N; /* result */
    int j;
    poly f, g;

    N = mod_init();
    dl_copy(&(M->degrees), &(N->degrees));
    for (j = 1; j <= length(&(M->gens)); j++)
    {
        f = plist_ref(&M->gens, j);
        if (f == NULL)
            continue;
        g = p_homog(M, f, v);
        gmInsert(N, g);
        dl_insert(&(N->deggens), degree(N, g));
    }
    return (N);
}

void homog_cmd(int argc, char *argv[])
{
    gmatrix M;
    variable *p;
    int v;

    if (argc ISNT 4)
    {
        printnew("homog <matrix> <homog variable> <new matrix>\n");
        return;
    }
    GET_MOD(M, 1);
    v = getVar(argv[2]);
    if (v IS - 1)
    {
        prerror("; var %s not defined\n", argv[2]);
        return;
    }
    NEW_MOD(p, 3);
    set_value(p, (ADDRESS)gm_homog(M, v));
}

/*--- intersections, ideal quotients, and tensor products ------*/

/*
intersect_cmd(argc, argv)
int argc ;
char *argv[] ;
{
    if (argc < 3) {
        printnew("intersect <matrix 1> ... <matrix n> <computation>\n") ;
        return ;
    }
    GET_MOD(M, 1) ;
    r = nrows(M) ;
    mat = gm_intmat(M) ;
    for (i=2; i<argc-1; i++) {
        GET_MOD(M, i) ;
        if (r ISNT nrows(M)) {
            prerror("; matrix #%d has wrong number of rows\n", i) ;
            mod_kill(M) ;
            return ;
        }
        gm_int2(mat, M) ;
    }

}*/
